name: .NET Build and Publish

on:
  workflow_call:
    inputs:
      project-folder:
        required: false
        default: src/FolderDog
        type: string
      release-name:
        required: true
        type: string
      runtime-name:
        required: false
        default: framework-dependent
        type: string
      runtime-configuration:
        required: false
        default: ""
        type: string
      version-tag:
        required: false
        default: ${{ github.run_number}}
        type: string

env:
  ARTIFACT_NAME: artifact-${{ inputs.runtime-name }}
  ARTIFACT_FILE_NAME: artifact-${{ inputs.runtime-name }}.zip

jobs:
  build-framework-dependent:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.project-folder }}
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: |
        dotnet build --no-restore
        dotnet publish -c Release ${{ inputs.runtime-configuration}}
    - name: Zip Artifact
      run: |
        if [ "${{ inputs.runtime-name }}" = "framework-dependent" ]; then
            folder="publish"
        else
            folder="${{ inputs.runtime-name }}/publish"
        fi
        echo "Files to zip:"
        ls /home/runner/work/folder-dog/folder-dog/src/FolderDog/bin/Release/net7.0/$folder
        tar -C /home/runner/work/folder-dog/folder-dog/src/FolderDog/bin/Release/net7.0/$folder -cvzf $ARTIFACT_FILE_NAME .
    - name: Upload Build Artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: ${{ env.ARTIFACT_FILE_NAME }}

  release:
    needs: build-framework-dependent
    runs-on: ubuntu-latest
    steps:
    - name: Download Artifact
      uses: actions/download-artifact@v3
      with:
        name: ${{ env.ARTIFACT_NAME }}
    - name: Create a release
      id: new-release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ inputs.runtime-name }}-${{ inputs.version-tag }}
        release_name: ${{ inputs.release-name }}
    - name: Upload Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.new-release.outputs.upload_url }}
        asset_path: ${{ env.ARTIFACT_FILE_NAME }}
        asset_name: webhookshell-${{ inputs.runtime-name }}-${{ inputs.version-tag }}.zip
        asset_content_type: application/zip
