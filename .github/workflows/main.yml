name: Build and Release

on: 
  workflow_dispatch:
    inputs:
      project-folder:
        required: false
        default: src/FolderDog
        type: string

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.project-folder }}
    strategy:
      matrix:
        runtime: [
          sdk-required,
          linux-x64,
          rhel-x64,
          win-x64
        ]
        include:
          - runtime: sdk-required
            runtime-configuration: ''
            publish-dir: publish
          - runtime: linux-x64
            runtime-configuration: '--runtime linux-x64 /p:PublishSingleFile=true /p:IncludeNativeLibrariesForSelfExtract=false /p:SelfContained=true /p:IncludeNativeLibrariesForSelfExtract=false /p:DebugType=none'
            publish-dir: linux-x64/publish
          - runtime: rhel-x64
            runtime-configuration: '--runtime rhel-x64 /p:PublishSingleFile=true /p:IncludeNativeLibrariesForSelfExtract=false /p:SelfContained=true /p:IncludeNativeLibrariesForSelfExtract=false /p:DebugType=none'
            publish-dir: /rhel-x64/publish
          - runtime: win-x64
            runtime-configuration: '--runtime win-x64 /p:PublishSingleFile=true /p:IncludeNativeLibrariesForSelfExtract=false /p:SelfContained=true /p:IncludeNativeLibrariesForSelfExtract=false /p:DebugType=none'
            publish-dir: win-x64/publish
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.x
      - name: Restore dependencies
        run: dotnet restore
      - name: Build
        run: |
          dotnet build --no-restore
          dotnet publish -c Release ${{ matrix.runtime-configuration }}
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: folder-dog-${{ matrix.runtime }}
          path: /home/runner/work/folder-dog/folder-dog/src/FolderDog/bin/Release/net7.0/${{ matrix.publish-dir }}

  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v3
      - name: Aggregate Releases
        run: |
          # Gather all zip files
          echo "'$(pwd)' folder content:"
          ls .

          # Zip the aggregated assets
          tar -czvf aggregated-assets.zip .

          echo "'$(pwd)' folder content after zip:"
          ls .
      - name: Create a release
        id: new-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
      - name: Upload Aggregated Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.new-release.outputs.upload_url }}
          asset_path: ./aggregated-assets.zip
          asset_name: all-runtimes.zip
          asset_content_type: application/zip
